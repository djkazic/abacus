# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import client_pb2 as client__pb2

GRPC_GENERATED_VERSION = "1.73.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in client_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class SwapClientStub(object):
    """
    SwapClient is a service that handles the client side process of onchain/offchain
    swaps. The service is designed for a single client.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LoopOut = channel.unary_unary(
            "/looprpc.SwapClient/LoopOut",
            request_serializer=client__pb2.LoopOutRequest.SerializeToString,
            response_deserializer=client__pb2.SwapResponse.FromString,
            _registered_method=True,
        )
        self.LoopIn = channel.unary_unary(
            "/looprpc.SwapClient/LoopIn",
            request_serializer=client__pb2.LoopInRequest.SerializeToString,
            response_deserializer=client__pb2.SwapResponse.FromString,
            _registered_method=True,
        )
        self.Monitor = channel.unary_stream(
            "/looprpc.SwapClient/Monitor",
            request_serializer=client__pb2.MonitorRequest.SerializeToString,
            response_deserializer=client__pb2.SwapStatus.FromString,
            _registered_method=True,
        )
        self.ListSwaps = channel.unary_unary(
            "/looprpc.SwapClient/ListSwaps",
            request_serializer=client__pb2.ListSwapsRequest.SerializeToString,
            response_deserializer=client__pb2.ListSwapsResponse.FromString,
            _registered_method=True,
        )
        self.SwapInfo = channel.unary_unary(
            "/looprpc.SwapClient/SwapInfo",
            request_serializer=client__pb2.SwapInfoRequest.SerializeToString,
            response_deserializer=client__pb2.SwapStatus.FromString,
            _registered_method=True,
        )
        self.AbandonSwap = channel.unary_unary(
            "/looprpc.SwapClient/AbandonSwap",
            request_serializer=client__pb2.AbandonSwapRequest.SerializeToString,
            response_deserializer=client__pb2.AbandonSwapResponse.FromString,
            _registered_method=True,
        )
        self.LoopOutTerms = channel.unary_unary(
            "/looprpc.SwapClient/LoopOutTerms",
            request_serializer=client__pb2.TermsRequest.SerializeToString,
            response_deserializer=client__pb2.OutTermsResponse.FromString,
            _registered_method=True,
        )
        self.LoopOutQuote = channel.unary_unary(
            "/looprpc.SwapClient/LoopOutQuote",
            request_serializer=client__pb2.QuoteRequest.SerializeToString,
            response_deserializer=client__pb2.OutQuoteResponse.FromString,
            _registered_method=True,
        )
        self.GetLoopInTerms = channel.unary_unary(
            "/looprpc.SwapClient/GetLoopInTerms",
            request_serializer=client__pb2.TermsRequest.SerializeToString,
            response_deserializer=client__pb2.InTermsResponse.FromString,
            _registered_method=True,
        )
        self.GetLoopInQuote = channel.unary_unary(
            "/looprpc.SwapClient/GetLoopInQuote",
            request_serializer=client__pb2.QuoteRequest.SerializeToString,
            response_deserializer=client__pb2.InQuoteResponse.FromString,
            _registered_method=True,
        )
        self.Probe = channel.unary_unary(
            "/looprpc.SwapClient/Probe",
            request_serializer=client__pb2.ProbeRequest.SerializeToString,
            response_deserializer=client__pb2.ProbeResponse.FromString,
            _registered_method=True,
        )
        self.GetL402Tokens = channel.unary_unary(
            "/looprpc.SwapClient/GetL402Tokens",
            request_serializer=client__pb2.TokensRequest.SerializeToString,
            response_deserializer=client__pb2.TokensResponse.FromString,
            _registered_method=True,
        )
        self.GetLsatTokens = channel.unary_unary(
            "/looprpc.SwapClient/GetLsatTokens",
            request_serializer=client__pb2.TokensRequest.SerializeToString,
            response_deserializer=client__pb2.TokensResponse.FromString,
            _registered_method=True,
        )
        self.FetchL402Token = channel.unary_unary(
            "/looprpc.SwapClient/FetchL402Token",
            request_serializer=client__pb2.FetchL402TokenRequest.SerializeToString,
            response_deserializer=client__pb2.FetchL402TokenResponse.FromString,
            _registered_method=True,
        )
        self.GetInfo = channel.unary_unary(
            "/looprpc.SwapClient/GetInfo",
            request_serializer=client__pb2.GetInfoRequest.SerializeToString,
            response_deserializer=client__pb2.GetInfoResponse.FromString,
            _registered_method=True,
        )
        self.GetLiquidityParams = channel.unary_unary(
            "/looprpc.SwapClient/GetLiquidityParams",
            request_serializer=client__pb2.GetLiquidityParamsRequest.SerializeToString,
            response_deserializer=client__pb2.LiquidityParameters.FromString,
            _registered_method=True,
        )
        self.SetLiquidityParams = channel.unary_unary(
            "/looprpc.SwapClient/SetLiquidityParams",
            request_serializer=client__pb2.SetLiquidityParamsRequest.SerializeToString,
            response_deserializer=client__pb2.SetLiquidityParamsResponse.FromString,
            _registered_method=True,
        )
        self.SuggestSwaps = channel.unary_unary(
            "/looprpc.SwapClient/SuggestSwaps",
            request_serializer=client__pb2.SuggestSwapsRequest.SerializeToString,
            response_deserializer=client__pb2.SuggestSwapsResponse.FromString,
            _registered_method=True,
        )
        self.ListReservations = channel.unary_unary(
            "/looprpc.SwapClient/ListReservations",
            request_serializer=client__pb2.ListReservationsRequest.SerializeToString,
            response_deserializer=client__pb2.ListReservationsResponse.FromString,
            _registered_method=True,
        )
        self.InstantOut = channel.unary_unary(
            "/looprpc.SwapClient/InstantOut",
            request_serializer=client__pb2.InstantOutRequest.SerializeToString,
            response_deserializer=client__pb2.InstantOutResponse.FromString,
            _registered_method=True,
        )
        self.InstantOutQuote = channel.unary_unary(
            "/looprpc.SwapClient/InstantOutQuote",
            request_serializer=client__pb2.InstantOutQuoteRequest.SerializeToString,
            response_deserializer=client__pb2.InstantOutQuoteResponse.FromString,
            _registered_method=True,
        )
        self.ListInstantOuts = channel.unary_unary(
            "/looprpc.SwapClient/ListInstantOuts",
            request_serializer=client__pb2.ListInstantOutsRequest.SerializeToString,
            response_deserializer=client__pb2.ListInstantOutsResponse.FromString,
            _registered_method=True,
        )
        self.NewStaticAddress = channel.unary_unary(
            "/looprpc.SwapClient/NewStaticAddress",
            request_serializer=client__pb2.NewStaticAddressRequest.SerializeToString,
            response_deserializer=client__pb2.NewStaticAddressResponse.FromString,
            _registered_method=True,
        )
        self.ListUnspentDeposits = channel.unary_unary(
            "/looprpc.SwapClient/ListUnspentDeposits",
            request_serializer=client__pb2.ListUnspentDepositsRequest.SerializeToString,
            response_deserializer=client__pb2.ListUnspentDepositsResponse.FromString,
            _registered_method=True,
        )
        self.WithdrawDeposits = channel.unary_unary(
            "/looprpc.SwapClient/WithdrawDeposits",
            request_serializer=client__pb2.WithdrawDepositsRequest.SerializeToString,
            response_deserializer=client__pb2.WithdrawDepositsResponse.FromString,
            _registered_method=True,
        )
        self.ListStaticAddressDeposits = channel.unary_unary(
            "/looprpc.SwapClient/ListStaticAddressDeposits",
            request_serializer=client__pb2.ListStaticAddressDepositsRequest.SerializeToString,
            response_deserializer=client__pb2.ListStaticAddressDepositsResponse.FromString,
            _registered_method=True,
        )
        self.ListStaticAddressWithdrawals = channel.unary_unary(
            "/looprpc.SwapClient/ListStaticAddressWithdrawals",
            request_serializer=client__pb2.ListStaticAddressWithdrawalRequest.SerializeToString,
            response_deserializer=client__pb2.ListStaticAddressWithdrawalResponse.FromString,
            _registered_method=True,
        )
        self.ListStaticAddressSwaps = channel.unary_unary(
            "/looprpc.SwapClient/ListStaticAddressSwaps",
            request_serializer=client__pb2.ListStaticAddressSwapsRequest.SerializeToString,
            response_deserializer=client__pb2.ListStaticAddressSwapsResponse.FromString,
            _registered_method=True,
        )
        self.GetStaticAddressSummary = channel.unary_unary(
            "/looprpc.SwapClient/GetStaticAddressSummary",
            request_serializer=client__pb2.StaticAddressSummaryRequest.SerializeToString,
            response_deserializer=client__pb2.StaticAddressSummaryResponse.FromString,
            _registered_method=True,
        )
        self.StaticAddressLoopIn = channel.unary_unary(
            "/looprpc.SwapClient/StaticAddressLoopIn",
            request_serializer=client__pb2.StaticAddressLoopInRequest.SerializeToString,
            response_deserializer=client__pb2.StaticAddressLoopInResponse.FromString,
            _registered_method=True,
        )


class SwapClientServicer(object):
    """
    SwapClient is a service that handles the client side process of onchain/offchain
    swaps. The service is designed for a single client.
    """

    def LoopOut(self, request, context):
        """loop: `out`
        LoopOut initiates an loop out swap with the given parameters. The call
        returns after the swap has been set up with the swap server. From that
        point onwards, progress can be tracked via the SwapStatus stream that is
        returned from Monitor().
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def LoopIn(self, request, context):
        """loop: `in`
        LoopIn initiates a loop in swap with the given parameters. The call
        returns after the swap has been set up with the swap server. From that
        point onwards, progress can be tracked via the SwapStatus stream
        that is returned from Monitor().
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Monitor(self, request, context):
        """loop: `monitor`
        Monitor will return a stream of swap updates for currently active swaps.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListSwaps(self, request, context):
        """loop: `listswaps`
        ListSwaps returns a list of all currently known swaps and their current
        status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SwapInfo(self, request, context):
        """loop: `swapinfo`
        SwapInfo returns all known details about a single swap.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AbandonSwap(self, request, context):
        """loop: `abandonswap`
        AbandonSwap allows the client to abandon a swap.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def LoopOutTerms(self, request, context):
        """loop: `terms`
        LoopOutTerms returns the terms that the server enforces for a loop out swap.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def LoopOutQuote(self, request, context):
        """loop: `quote`
        LoopOutQuote returns a quote for a loop out swap with the provided
        parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetLoopInTerms(self, request, context):
        """loop: `terms`
        GetTerms returns the terms that the server enforces for swaps.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetLoopInQuote(self, request, context):
        """loop: `quote`
        GetQuote returns a quote for a swap with the provided parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Probe(self, request, context):
        """
        Probe asks he sever to probe the route to us to have a better upfront
        estimate about routing fees when loopin-in.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetL402Tokens(self, request, context):
        """loop: `listauth`
        GetL402Tokens returns all L402 tokens the daemon ever paid for.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetLsatTokens(self, request, context):
        """
        Deprecated: use GetL402Tokens.
        This API is provided to maintain backward compatibility with gRPC clients
        (e.g. `loop listauth`, Terminal Web, RTL).
        Type LsatToken used by GetLsatTokens in the past was renamed to L402Token,
        but this does not affect binary encoding, so we can use type L402Token here.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def FetchL402Token(self, request, context):
        """loop: `fetchl402`
        FetchL402Token fetches an L402 token from the server, this is required in
        order to receive reservation notifications from the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetInfo(self, request, context):
        """loop: `getinfo`
        GetInfo gets basic information about the loop daemon.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetLiquidityParams(self, request, context):
        """loop: `getparams`
        GetLiquidityParams gets the parameters that the daemon's liquidity manager
        is currently configured with. This may be nil if nothing is configured.
        [EXPERIMENTAL]: endpoint is subject to change.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetLiquidityParams(self, request, context):
        """loop: `setparams`
        SetLiquidityParams sets a new set of parameters for the daemon's liquidity
        manager. Note that the full set of parameters must be provided, because
        this call fully overwrites our existing parameters.
        [EXPERIMENTAL]: endpoint is subject to change.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SuggestSwaps(self, request, context):
        """loop: `suggestswaps`
        SuggestSwaps returns a list of recommended swaps based on the current
        state of your node's channels and it's liquidity manager parameters.
        Note that only loop out suggestions are currently supported.
        [EXPERIMENTAL]: endpoint is subject to change.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListReservations(self, request, context):
        """loop: `listreservations`
        ListReservations returns a list of all reservations the server opened to us.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def InstantOut(self, request, context):
        """loop: `instantout`
        InstantOut initiates an instant out swap with the given parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def InstantOutQuote(self, request, context):
        """loop: `instantoutquote`
        InstantOutQuote returns a quote for an instant out swap with the provided
        parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListInstantOuts(self, request, context):
        """loop: `listinstantouts`
        ListInstantOuts returns a list of all currently known instant out swaps and
        their current status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def NewStaticAddress(self, request, context):
        """loop: `static newstaticaddress`
        NewStaticAddress requests a new static address for loop-ins from the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListUnspentDeposits(self, request, context):
        """loop: `static listunspentdeposits`
        ListUnspentDeposits returns a list of utxos deposited at a static address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def WithdrawDeposits(self, request, context):
        """loop:`static withdraw`
        WithdrawDeposits withdraws a selection or all deposits of a static address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListStaticAddressDeposits(self, request, context):
        """loop:`listdeposits`
        ListStaticAddressDeposits returns a list of filtered static address
        deposits.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListStaticAddressWithdrawals(self, request, context):
        """loop:`listwithdrawals`
        ListStaticAddressWithdrawals returns a list of static address withdrawals.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListStaticAddressSwaps(self, request, context):
        """loop:`listswaps`
        ListStaticAddressSwaps returns a list of filtered static address
        swaps.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetStaticAddressSummary(self, request, context):
        """loop:`static summary`
        GetStaticAddressSummary returns a summary of static address related
        statistics.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StaticAddressLoopIn(self, request, context):
        """loop:`static`
        StaticAddressLoopIn initiates a static address loop-in swap.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_SwapClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "LoopOut": grpc.unary_unary_rpc_method_handler(
            servicer.LoopOut,
            request_deserializer=client__pb2.LoopOutRequest.FromString,
            response_serializer=client__pb2.SwapResponse.SerializeToString,
        ),
        "LoopIn": grpc.unary_unary_rpc_method_handler(
            servicer.LoopIn,
            request_deserializer=client__pb2.LoopInRequest.FromString,
            response_serializer=client__pb2.SwapResponse.SerializeToString,
        ),
        "Monitor": grpc.unary_stream_rpc_method_handler(
            servicer.Monitor,
            request_deserializer=client__pb2.MonitorRequest.FromString,
            response_serializer=client__pb2.SwapStatus.SerializeToString,
        ),
        "ListSwaps": grpc.unary_unary_rpc_method_handler(
            servicer.ListSwaps,
            request_deserializer=client__pb2.ListSwapsRequest.FromString,
            response_serializer=client__pb2.ListSwapsResponse.SerializeToString,
        ),
        "SwapInfo": grpc.unary_unary_rpc_method_handler(
            servicer.SwapInfo,
            request_deserializer=client__pb2.SwapInfoRequest.FromString,
            response_serializer=client__pb2.SwapStatus.SerializeToString,
        ),
        "AbandonSwap": grpc.unary_unary_rpc_method_handler(
            servicer.AbandonSwap,
            request_deserializer=client__pb2.AbandonSwapRequest.FromString,
            response_serializer=client__pb2.AbandonSwapResponse.SerializeToString,
        ),
        "LoopOutTerms": grpc.unary_unary_rpc_method_handler(
            servicer.LoopOutTerms,
            request_deserializer=client__pb2.TermsRequest.FromString,
            response_serializer=client__pb2.OutTermsResponse.SerializeToString,
        ),
        "LoopOutQuote": grpc.unary_unary_rpc_method_handler(
            servicer.LoopOutQuote,
            request_deserializer=client__pb2.QuoteRequest.FromString,
            response_serializer=client__pb2.OutQuoteResponse.SerializeToString,
        ),
        "GetLoopInTerms": grpc.unary_unary_rpc_method_handler(
            servicer.GetLoopInTerms,
            request_deserializer=client__pb2.TermsRequest.FromString,
            response_serializer=client__pb2.InTermsResponse.SerializeToString,
        ),
        "GetLoopInQuote": grpc.unary_unary_rpc_method_handler(
            servicer.GetLoopInQuote,
            request_deserializer=client__pb2.QuoteRequest.FromString,
            response_serializer=client__pb2.InQuoteResponse.SerializeToString,
        ),
        "Probe": grpc.unary_unary_rpc_method_handler(
            servicer.Probe,
            request_deserializer=client__pb2.ProbeRequest.FromString,
            response_serializer=client__pb2.ProbeResponse.SerializeToString,
        ),
        "GetL402Tokens": grpc.unary_unary_rpc_method_handler(
            servicer.GetL402Tokens,
            request_deserializer=client__pb2.TokensRequest.FromString,
            response_serializer=client__pb2.TokensResponse.SerializeToString,
        ),
        "GetLsatTokens": grpc.unary_unary_rpc_method_handler(
            servicer.GetLsatTokens,
            request_deserializer=client__pb2.TokensRequest.FromString,
            response_serializer=client__pb2.TokensResponse.SerializeToString,
        ),
        "FetchL402Token": grpc.unary_unary_rpc_method_handler(
            servicer.FetchL402Token,
            request_deserializer=client__pb2.FetchL402TokenRequest.FromString,
            response_serializer=client__pb2.FetchL402TokenResponse.SerializeToString,
        ),
        "GetInfo": grpc.unary_unary_rpc_method_handler(
            servicer.GetInfo,
            request_deserializer=client__pb2.GetInfoRequest.FromString,
            response_serializer=client__pb2.GetInfoResponse.SerializeToString,
        ),
        "GetLiquidityParams": grpc.unary_unary_rpc_method_handler(
            servicer.GetLiquidityParams,
            request_deserializer=client__pb2.GetLiquidityParamsRequest.FromString,
            response_serializer=client__pb2.LiquidityParameters.SerializeToString,
        ),
        "SetLiquidityParams": grpc.unary_unary_rpc_method_handler(
            servicer.SetLiquidityParams,
            request_deserializer=client__pb2.SetLiquidityParamsRequest.FromString,
            response_serializer=client__pb2.SetLiquidityParamsResponse.SerializeToString,
        ),
        "SuggestSwaps": grpc.unary_unary_rpc_method_handler(
            servicer.SuggestSwaps,
            request_deserializer=client__pb2.SuggestSwapsRequest.FromString,
            response_serializer=client__pb2.SuggestSwapsResponse.SerializeToString,
        ),
        "ListReservations": grpc.unary_unary_rpc_method_handler(
            servicer.ListReservations,
            request_deserializer=client__pb2.ListReservationsRequest.FromString,
            response_serializer=client__pb2.ListReservationsResponse.SerializeToString,
        ),
        "InstantOut": grpc.unary_unary_rpc_method_handler(
            servicer.InstantOut,
            request_deserializer=client__pb2.InstantOutRequest.FromString,
            response_serializer=client__pb2.InstantOutResponse.SerializeToString,
        ),
        "InstantOutQuote": grpc.unary_unary_rpc_method_handler(
            servicer.InstantOutQuote,
            request_deserializer=client__pb2.InstantOutQuoteRequest.FromString,
            response_serializer=client__pb2.InstantOutQuoteResponse.SerializeToString,
        ),
        "ListInstantOuts": grpc.unary_unary_rpc_method_handler(
            servicer.ListInstantOuts,
            request_deserializer=client__pb2.ListInstantOutsRequest.FromString,
            response_serializer=client__pb2.ListInstantOutsResponse.SerializeToString,
        ),
        "NewStaticAddress": grpc.unary_unary_rpc_method_handler(
            servicer.NewStaticAddress,
            request_deserializer=client__pb2.NewStaticAddressRequest.FromString,
            response_serializer=client__pb2.NewStaticAddressResponse.SerializeToString,
        ),
        "ListUnspentDeposits": grpc.unary_unary_rpc_method_handler(
            servicer.ListUnspentDeposits,
            request_deserializer=client__pb2.ListUnspentDepositsRequest.FromString,
            response_serializer=client__pb2.ListUnspentDepositsResponse.SerializeToString,
        ),
        "WithdrawDeposits": grpc.unary_unary_rpc_method_handler(
            servicer.WithdrawDeposits,
            request_deserializer=client__pb2.WithdrawDepositsRequest.FromString,
            response_serializer=client__pb2.WithdrawDepositsResponse.SerializeToString,
        ),
        "ListStaticAddressDeposits": grpc.unary_unary_rpc_method_handler(
            servicer.ListStaticAddressDeposits,
            request_deserializer=client__pb2.ListStaticAddressDepositsRequest.FromString,
            response_serializer=client__pb2.ListStaticAddressDepositsResponse.SerializeToString,
        ),
        "ListStaticAddressWithdrawals": grpc.unary_unary_rpc_method_handler(
            servicer.ListStaticAddressWithdrawals,
            request_deserializer=client__pb2.ListStaticAddressWithdrawalRequest.FromString,
            response_serializer=client__pb2.ListStaticAddressWithdrawalResponse.SerializeToString,
        ),
        "ListStaticAddressSwaps": grpc.unary_unary_rpc_method_handler(
            servicer.ListStaticAddressSwaps,
            request_deserializer=client__pb2.ListStaticAddressSwapsRequest.FromString,
            response_serializer=client__pb2.ListStaticAddressSwapsResponse.SerializeToString,
        ),
        "GetStaticAddressSummary": grpc.unary_unary_rpc_method_handler(
            servicer.GetStaticAddressSummary,
            request_deserializer=client__pb2.StaticAddressSummaryRequest.FromString,
            response_serializer=client__pb2.StaticAddressSummaryResponse.SerializeToString,
        ),
        "StaticAddressLoopIn": grpc.unary_unary_rpc_method_handler(
            servicer.StaticAddressLoopIn,
            request_deserializer=client__pb2.StaticAddressLoopInRequest.FromString,
            response_serializer=client__pb2.StaticAddressLoopInResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "looprpc.SwapClient", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("looprpc.SwapClient", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class SwapClient(object):
    """
    SwapClient is a service that handles the client side process of onchain/offchain
    swaps. The service is designed for a single client.
    """

    @staticmethod
    def LoopOut(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/LoopOut",
            client__pb2.LoopOutRequest.SerializeToString,
            client__pb2.SwapResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def LoopIn(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/LoopIn",
            client__pb2.LoopInRequest.SerializeToString,
            client__pb2.SwapResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Monitor(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/looprpc.SwapClient/Monitor",
            client__pb2.MonitorRequest.SerializeToString,
            client__pb2.SwapStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListSwaps(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/ListSwaps",
            client__pb2.ListSwapsRequest.SerializeToString,
            client__pb2.ListSwapsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SwapInfo(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/SwapInfo",
            client__pb2.SwapInfoRequest.SerializeToString,
            client__pb2.SwapStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def AbandonSwap(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/AbandonSwap",
            client__pb2.AbandonSwapRequest.SerializeToString,
            client__pb2.AbandonSwapResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def LoopOutTerms(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/LoopOutTerms",
            client__pb2.TermsRequest.SerializeToString,
            client__pb2.OutTermsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def LoopOutQuote(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/LoopOutQuote",
            client__pb2.QuoteRequest.SerializeToString,
            client__pb2.OutQuoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetLoopInTerms(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/GetLoopInTerms",
            client__pb2.TermsRequest.SerializeToString,
            client__pb2.InTermsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetLoopInQuote(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/GetLoopInQuote",
            client__pb2.QuoteRequest.SerializeToString,
            client__pb2.InQuoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Probe(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/Probe",
            client__pb2.ProbeRequest.SerializeToString,
            client__pb2.ProbeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetL402Tokens(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/GetL402Tokens",
            client__pb2.TokensRequest.SerializeToString,
            client__pb2.TokensResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetLsatTokens(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/GetLsatTokens",
            client__pb2.TokensRequest.SerializeToString,
            client__pb2.TokensResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def FetchL402Token(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/FetchL402Token",
            client__pb2.FetchL402TokenRequest.SerializeToString,
            client__pb2.FetchL402TokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetInfo(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/GetInfo",
            client__pb2.GetInfoRequest.SerializeToString,
            client__pb2.GetInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetLiquidityParams(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/GetLiquidityParams",
            client__pb2.GetLiquidityParamsRequest.SerializeToString,
            client__pb2.LiquidityParameters.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SetLiquidityParams(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/SetLiquidityParams",
            client__pb2.SetLiquidityParamsRequest.SerializeToString,
            client__pb2.SetLiquidityParamsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SuggestSwaps(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/SuggestSwaps",
            client__pb2.SuggestSwapsRequest.SerializeToString,
            client__pb2.SuggestSwapsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListReservations(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/ListReservations",
            client__pb2.ListReservationsRequest.SerializeToString,
            client__pb2.ListReservationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def InstantOut(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/InstantOut",
            client__pb2.InstantOutRequest.SerializeToString,
            client__pb2.InstantOutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def InstantOutQuote(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/InstantOutQuote",
            client__pb2.InstantOutQuoteRequest.SerializeToString,
            client__pb2.InstantOutQuoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListInstantOuts(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/ListInstantOuts",
            client__pb2.ListInstantOutsRequest.SerializeToString,
            client__pb2.ListInstantOutsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def NewStaticAddress(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/NewStaticAddress",
            client__pb2.NewStaticAddressRequest.SerializeToString,
            client__pb2.NewStaticAddressResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListUnspentDeposits(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/ListUnspentDeposits",
            client__pb2.ListUnspentDepositsRequest.SerializeToString,
            client__pb2.ListUnspentDepositsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def WithdrawDeposits(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/WithdrawDeposits",
            client__pb2.WithdrawDepositsRequest.SerializeToString,
            client__pb2.WithdrawDepositsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListStaticAddressDeposits(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/ListStaticAddressDeposits",
            client__pb2.ListStaticAddressDepositsRequest.SerializeToString,
            client__pb2.ListStaticAddressDepositsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListStaticAddressWithdrawals(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/ListStaticAddressWithdrawals",
            client__pb2.ListStaticAddressWithdrawalRequest.SerializeToString,
            client__pb2.ListStaticAddressWithdrawalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListStaticAddressSwaps(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/ListStaticAddressSwaps",
            client__pb2.ListStaticAddressSwapsRequest.SerializeToString,
            client__pb2.ListStaticAddressSwapsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetStaticAddressSummary(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/GetStaticAddressSummary",
            client__pb2.StaticAddressSummaryRequest.SerializeToString,
            client__pb2.StaticAddressSummaryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def StaticAddressLoopIn(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/looprpc.SwapClient/StaticAddressLoopIn",
            client__pb2.StaticAddressLoopInRequest.SerializeToString,
            client__pb2.StaticAddressLoopInResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
